# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CI Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-20.04, windows-latest, macos-latest ]
        build_type: [ Debug ]
        cpp_compiler: [ g++, clang++, cl ]
        include:
          - os: windows-latest
            cpp_compiler: cl
          - os: ubuntu-20.04
            cpp_compiler: g++
          - os: ubuntu-20.04
            cpp_compiler: clang++
          - os: macos-latest
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            cpp_compiler: clang
          - os: ubuntu-20.04
            cpp_compiler: cl
          - os: macos-latest
            cpp_compiler: gcc

    steps:
      - name: Clone the repo
        uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_FLAGS='--coverage -Wall -Wextra -Werror -DNDEBUG -DLIBRARY_LOG_LEVEL=LOG_DEBUG'
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Run Tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

      - name: Check Coverage
        id: action-check-line-and-branch-coverage
        if: matrix.os == 'ubuntu-20.04'
        with:
          coverage-file: ./${{ steps.strings.outputs.build-output-dir }}/coverage.info
        env:
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd: \033[0m
        run: >
          sudo apt-get install lcov fd-find
          # ${{ env.stepName }}
          echo -e "::group::${{ env.bashInfo }} Build Coverage Target ${{ env.bashEnd }}"
          # Build the coverage target
          make -C build/ coverage
          
          echo -e "::group::${{ env.bashInfo }} Generate Coverage Report ${{ env.bashEnd }}"
          # Generate coverage report, excluding extra directories
          lcov --rc lcov_branch_coverage=1 -r build/coverage.info -o build/coverage.info '*test*' '*CMakeCCompilerId*' '*mocks*'

          echo "::endgroup::"
          lcov --list --rc lcov_branch_coverage=1 --list build/coverage.info
          LINE_COVERAGE=$(lcov --list build/coverage.info | tail -n 1 | cut -d '|' -f 2 | sed -n "s/\([^%]*\)%.*/\1/p")
          BRANCH_COVERAGE=$(lcov --rc lcov_branch_coverage=1 --list build/coverage.info | tail -n 1 | cut -d '|' -f 4 | sed -n "s/\([^%]*\)%.*/\1/p")
          RESULT=0

          # Check Line Coverage
          echo -e " ${{ env.bashInfo }} Required Line Coverage: 95 ${{ env.bashEnd}}"
          echo -e " ${{ env.bashInfo }} Line Coverage of PR: $LINE_COVERAGE ${{ env.bashEnd}}\n"
          if [[ $(echo "$LINE_COVERAGE < 95" | bc) -ne 0 ]]; then
            echo -e "${{ env.bashFail }} Line Coverage is too low. ${{ env.bashEnd }}"
            RESULT=1
          fi

          echo -e " ${{ env.bashInfo }} Required Branch Coverage: 95 ${{ env.bashEnd}}"
          echo -e " ${{ env.bashInfo }} Line Coverage of PR: $BRANCH_COVERAGE ${{ env.bashEnd}}"
          if [[ $(echo "$BRANCH_COVERAGE < 95" | bc) -ne 0 ]]; then
            echo -e "${{ env.bashFail }} Branch Coverage is too low. ${{ env.bashEnd }}"
            RESULT=1
          fi

          if [ $RESULT -eq 0 ]; then
            # echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "::group::Create Failed Codecov HTML Report"
            genhtml --rc lcov_branch_coverage=1 --ignore-errors source build/coverage.info --legend --title "$(basename `git rev-parse --show-toplevel`) $(git rev-parse HEAD)" --output-directory=CodecovHTMLReport
            zip -r CodecovHTMLReport.zip CodecovHTMLReport
            echo -e "::endgroup::"
            # echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          fi
          exit $RESULT
      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-20.04' && failure() && ( steps.action-check-line-and-branch-coverage.outcome == 'failure' )
        id: upload-codecov-report
        with:
          name: CodecovHTMLReport
          path: CodecovHTMLReport.zip
          retention-days: 5

  format-check:
    runs-on: ubuntu-20.04
    steps:
      - name: Clone the repo
        uses: actions/checkout@v3

      - name: Install clang-format
        env:
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd: \033[0m
        run: >
          # echo -e "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"

          sudo apt-get install clang-format fd-find dos2unix
          echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
          export PATH="$PATH:$GITHUB_ACTION_PATH"

          # Check that the commands installed correctly
          fdfind --version
          echo -e "::endgroup::"
          
          # echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          echo -e "${{ env.bashInfo }} Using clang-format Version "$(clang-format --version)" ${{ env.bashEnd }}"

      - name: Check Formatting
        id: action-formatting-check
        shell: bash
        env:
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd: \033[0m
        run: |
          # ${{ env.stepName }}
          # echo -e "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"

          exitCode=0
          export PATH="$PATH:$GITHUB_ACTION_PATH"

          # Parse the optional inputs
          args=""

          # Get all .cpp and .hpp files, as well as any other requested file types.
          # Then run clang-format with the common config file.

          echo -e "${{ env.bashInfo }} fdfind -e cpp -e hpp ${args} --exec clang-format -i ${{ env.bashEnd }}"
          fdfind -e cpp -e hpp ${args} --exec clang-format --verbose -i

          # Replace all trailing whitespace, exclude photo and binary files
          echo -e "${{ env.bashInfo }} Check for Trailing Whitespace ${{ env.bashEnd }}"
          echo -e "${{ env.bashInfo }} fdfind --type=file -E '*.png' -E '*.jpg' -E '*.svg' -E '*.a' -E '*.lib' -E '*.patch' ${args} . --exec sed -Ei 's/[[:blank:]]+$//' ${{ env.bashEnd }}"
          fdfind --type=file -E '*.png' -E '*.jpg' -E '*.svg' -E '*.a' -E '*.lib' -E '*.patch' ${args} . --exec sed -Ei 's/[[:blank:]]+$//'

          # Replace all line endings with LF ones instead of CRLF
          echo -e "${{ env.bashInfo }} Check for CRLF Line Endings ${{ env.bashEnd }}"
          echo -e "${{ env.bashInfo }} fdfind --type=file ${args} . --exec dos2unix ${{ env.bashEnd }}"
          fdfind --type=file ${args} . --exec dos2unix -q

          # Determine if there was a formatting diff.
          # If there was, create a patch of it.
          set +e
          git diff --exit-code >> formattingChanges.patch
          exitCode=$?
          set -e

          if [ $exitCode -eq 0 ]; then
              echo -e "::endgroup::"
              # echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
              # Run a git diff to print the formatting differences
              echo -e "::group::${{ env.bashInfo }} Format Difference ${{ env.bashEnd }}"
              git diff --color=always
              echo -e "::endgroup::"
              echo -e "${{ env.bashFail }} List of files with formatting errors: ${{ env.bashEnd }}"
              echo -e "${{ env.bashFail }} "$(git diff --name-only)" ${{ env.bashEnd }} "
              # echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          fi
          exit $exitCode


  git-secrets:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Checkout awslabs/git-secrets
        uses: actions/checkout@v3
        with:
          repository: awslabs/git-secrets
          ref: master
          path: git-secrets

      - name: Install git-secrets
        run: cd git-secrets && sudo make install && cd ..

      - name: Run git-secrets
        run: |
          git-secrets --register-aws
          git-secrets --scan
