name: Static

on:
  workflow_call:
  workflow_dispatch:

env:
  bashPass: \033[32;1mPASSED -
  bashInfo: \033[33;1mINFO -
  bashFail: \033[31;1mFAILED -
  bashEnd: \033[0m

jobs:
  analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Clone the repo
        uses: actions/checkout@v3

      - name: Install cppcheck
        run: |
          sudo apt-get install -y cppcheck fd-find
          echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
          export PATH="$PATH:$GITHUB_ACTION_PATH"

          # Check that the commands installed correctly
          fdfind --version
          echo -e "::endgroup::"
          
          echo -e "${{ env.bashInfo }} Using cppcheck version "$(cppcheck --version)" ${{ env.bashEnd }}"

      - name: Configure project
        run: >
          cmake -B build
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_BUILD_TYPE=Debug
          -S ${{ github.workspace }}

      - name: Perform analysis
        run: |
          # Parse the optional inputs
          args=""
          
          # Get all .cpp and .hpp files, as well as any other requested file types.
          target_files="$(fdfind -e cpp -e hpp ${args})"
          
          # Then run cppcheck.
          cppcheck --enable=all --inconclusive --std=c++17 --suppress=missingIncludeSystem \
          -i build -I nucleus/include -I nucleus/src -I nucleus/tests \
          -I build/_deps/device-sdk-cpp-src/crt/aws-crt-cpp/include -I build/_deps/catch2-src/src \
          --verbose --xml $(echo $target_files) 2> report.xml \;

      - name: Generate report
        run: >
          cppcheck-htmlreport --file=report.xml --report-dir=cppcheck_report

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: cppcheck_report
          path: cppcheck_report

  format-check:
    name: Check Formatting
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check Formatting
        id: formatting-check
        run: nix build -L .#checks.x86_64-linux.formatting

      - name: Generate / Show Patch
        if: ${{ failure() && steps.formatting-check.outcome == 'failure' }}
        shell: nix develop -c bash -exo pipefail {0}
        run: |
          nix fmt
          git diff >> formatting.patch
          git diff --color=always

      - name: Upload Patch
        if: ${{ failure() && steps.formatting-check.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: formatting_patch
          path: formatting.patch
          retention-days: 5

  clang-tidy:
    name: Check Clang-tidy
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: nix develop -c bash -exo pipefail {0}
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Configure project
        run: cmake $cmakeFlags -B build

      - name: Check Clang-tidy
        id: clang-tidy-check
        run: |
          clang-tidy -p ./build --warnings-as-errors='*' -header-filter=.* \
            $(fd -t f -e cpp)

      - name: Generate / Show Patch
        if: ${{ failure() && steps.clang-tidy-check.outcome == 'failure' }}
        run: |
          clang-tidy -p ./build -header-filter=.* --fix --fix-errors --quiet \
            $(fd -t f -e cpp)
          git diff >> clang-tidy.patch
          git diff --color=always

      - name: Upload Patch
        if: ${{ failure() && steps.clang-tidy-check.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: clang-tidy_patch
          path: clang-tidy.patch
          retention-days: 5

  editorconfig:
    name: Check editorconfig-checker
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check editorconfig-checker
        run: nix build -L .#checks.x86_64-linux.editorconfig

  cmake-lint:
    name: Check CMake
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check CMake
        run: nix build -L .#checks.x86_64-linux.cmake-lint
