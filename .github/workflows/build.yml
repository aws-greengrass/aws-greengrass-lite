name: Test

on:
  push:
    branches:
      - newQemuTrail
  workflow_dispatch:
  pull_request:
      branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: windows-latest
          #   c_compiler: msvc
          #   cpp_compiler: msvc
          #   build_type: Debug
          # - os: windows-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++
          #   build_type: Debug
          # - os: ubuntu-20.04
          #   c_compiler: gcc
          #   cpp_compiler: g++
          #   build_type: Debug
          # - os: ubuntu-20.04
          #   c_compiler: clang
          #   cpp_compiler: clang++
          #   build_type: Debug
          # - os: macos-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
          #   build_type: Debug
          - os: ubuntu-20.04
            setup: QEMU
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Debug
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.setup == 'QEMU' }}
        uses: pguyot/arm-runner-action@v2
        with:
          image_additional_mb: 2048
          base_image: raspios_lite_arm64:latest
          shell: /bin/bash -o pipefail
          optimize_image: no
          cpu: cortex-a53
          commands: |
            sudo apt-get -y install cmake
            sudo apt-get -y install git
            cmake -B build -S . \
              -DCMAKE_C_COMPILER=${{matrix.c_compiler}} \
              -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}} \
              -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
            cmake --build /aws-greengrass-lite/build --config ${{matrix.build_type }} --target nucleus-tests -j4
            cd /aws-greengrass-lite/build
            ctest -R nucleus --output-on-failure

      - name: Download curl
        if: ${{matrix.os == 'ubuntu-20.04'}}
        run: |
          sudo apt update 
          sudo apt-get install libcurl4-openssl-dev

      - name: Configure CMake
        shell: bash
        if: ${{ matrix.os == 'windows-latest' && matrix.cpp_compiler == 'g++' }}
        run: |
          cmake -B build -S . -G "MinGW Makefiles" \
            -DCMAKE_C_COMPILER=${{matrix.c_compiler}} \
            -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}} \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
      
      - name: Configure CMake
        shell: bash
        if:
          ${{ matrix.os == 'windows-latest' && matrix.cpp_compiler == 'msvc' }}
        run: |
          cmake -B build -S . -G "Visual Studio 17 2022" \
            -DCMAKE_C_COMPILER=${{matrix.c_compiler}} \
            -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}} \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Configure CMake
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          cmake -B build -S . \
            -DCMAKE_C_COMPILER=${{matrix.c_compiler}} \
            -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}} \
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        run:
          cmake --build ${{ github.workspace }}/build --config ${{
          matrix.build_type }}

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest -R nucleus --output-on-failure
