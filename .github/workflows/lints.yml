name: Linting

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]

defaults:
  run:
    shell: nix develop .#ci -c bash -exo pipefail {0}

jobs:
  format-check:
    timeout-minutes: 60
    name: Check Formatting
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check Formatting
        id: formatting-check
        run: nix build -L --log-lines 0 .#checks.x86_64-linux.formatting

      - name: Generate / Show Patch
        if: ${{ failure() && steps.formatting-check.outcome == 'failure' }}
        run: |
          nix fmt
          git diff >> formatting.patch
          git diff --color=always

      - name: Upload Patch
        if: ${{ failure() && steps.formatting-check.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: formatting_patch
          path: formatting.patch
          retention-days: 5

  clang-tidy:
    timeout-minutes: 15
    name: Check clang-tidy
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Configure project
        run: nix develop .#gglite-clang -ic cmake $FETCHCONTENT_FLAGS -B build

      - name: Get file list
        id: get-file-list
        run: |
          git fetch origin ${{ github.event.pull_request.base.sha }}
          set +e
          export CHANGED_FILES=$(git diff --name-only \
           ${{ github.event.pull_request.base.sha }} | grep "\.c\(pp\)\?$")
          set -e
          echo CHANGED_FILES=$CHANGED_FILES >> $GITHUB_OUTPUT

      - name: Check Clang-tidy
        id: clang-tidy-check
        if: ${{ steps.get-file-list.outputs.CHANGED_FILES != ''}}
        run: |
          clang-tidy -p ./build --header-filter='.*' --warnings-as-errors='*' \
            ${{ steps.get-file-list.outputs.CHANGED_FILES }}

      - name: Generate / Show Patch
        if: ${{ failure() && steps.clang-tidy-check.outcome == 'failure' }}
        run: |
          clang-tidy -p ./build --header-filter='.*' --fix --fix-errors \
            --quiet ${{ steps.get-file-list.outputs.CHANGED_FILES }}
          git diff >> clang-tidy.patch
          git diff --color=always

      - name: Upload Patch
        if: ${{ failure() && steps.clang-tidy-check.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: clang-tidy_patch
          path: clang-tidy.patch
          retention-days: 5

  cppcheck:
    timeout-minutes: 60
    name: Check cppcheck
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Configure project
        run: cmake $FETCHCONTENT_FLAGS -B build

      - name: Check cppcheck
        id: cppcheck-run
        run: |
          mkdir .cppcheck
          cppcheck_flags="--cppcheck-build-dir=.cppcheck --quiet --std=c++17 \
            --project=build/compile_commands.json -ibuild -inucleus/tests \
            --check-level=exhaustive --enable=all --verbose --inline-suppr \
            --suppress=missingIncludeSystem --suppress=*:build/* \
            --suppress=*:/*"
          # print output, save to text file, and save to xml (only checks once)
          cppcheck $cppcheck_flags
          cppcheck $cppcheck_flags 2> report.txt
          cppcheck $cppcheck_flags --xml 2> report.xml
          [ ! -s report.txt ] || exit 1

      - name: Generate report
        if: ${{ failure() && steps.cppcheck-run.outcome == 'failure' }}
        run: cppcheck-htmlreport --file=report.xml --report-dir=cppcheck_report

      - name: Upload report
        if: ${{ failure() && steps.cppcheck-run.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: cppcheck_report
          path: cppcheck_report
          retention-days: 5

  editorconfig:
    timeout-minutes: 60
    name: Check editorconfig-checker
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check editorconfig-checker
        run: nix build -L --log-lines 0 .#checks.x86_64-linux.editorconfig

  cmake-lint:
    timeout-minutes: 60
    name: Check CMake
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check CMake
        run: nix build -L --log-lines 0 .#checks.x86_64-linux.cmake-lint

  git-secrets:
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Run git-secrets
        run: |
          git-secrets --register-aws
          git-secrets --scan

  check-dependency-hashes:
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check dependency hashes
        run: nix build -L --log-lines 0 .#checks.x86_64-linux.deps-hashes
