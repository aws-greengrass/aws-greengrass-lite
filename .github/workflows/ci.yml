name: CI

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 100
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux GCC
            package: default
          - name: Linux LLVM
            package: gglite-clang
          - name: sample component
            package: sample-component
    name: Build ${{ matrix.name }}
    runs-on:
      codebuild-aws-greengrass-lite-${{ github.run_id }}-${{ github.run_attempt
      }}-arm-3.0-large
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build
        run: nix build -L --log-lines 0 .#${{ matrix.package }}

  build-mac:
    timeout-minutes: 100
    name: Build MacOS
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build
        run: nix build -L --log-lines 0

  build-windows:
    name: Build Windows MinGW
    timeout-minutes: 100
    runs-on:
      codebuild-aws-greengrass-lite-${{ github.run_id }}-${{ github.run_attempt
      }}-windows-3.0-large
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - name: Configure
        shell: bash
        run: |
          cmake -B build -G "MinGW Makefiles" \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTING=1
      - name: Build
        run: make -C build -j4
      - name: Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest --test-dir nucleus --output-on-failure

  run-checks:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: editorconfig
            check: editorconfig
          - name: CMake
            check: cmake-lint
          - name: dependency hashes
            check: deps-hashes
    name: Check ${{ matrix.name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check ${{ matrix.name }}
        run:
          nix build -L --log-lines 0 .#checks.x86_64-linux.${{ matrix.check }}

  format-check:
    timeout-minutes: 60
    name: Check formatting
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix develop .#ci -ic bash -exo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check formatting
        id: formatting-check
        run: nix build -L --log-lines 0 .#checks.x86_64-linux.formatting

      - name: Generate / show patch
        if: ${{ failure() && steps.formatting-check.outcome == 'failure' }}
        run: |
          nix fmt
          git diff >> formatting.patch
          git diff --color=always

      - name: Upload patch
        if: ${{ failure() && steps.formatting-check.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: formatting_patch
          path: formatting.patch
          retention-days: 5

  clang-tidy:
    timeout-minutes: 15
    name: Check clang-tidy
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix develop .#ci -ic bash -exo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Configure project
        run: nix develop .#gglite-clang -ic cmake $FETCHCONTENT_FLAGS -B build

      - name: Get file list
        id: get-file-list
        run: |
          git fetch origin ${{ github.event.pull_request.base.sha }}
          set +e
          export CHANGED_FILES=$(git diff --name-only \
           ${{ github.event.pull_request.base.sha }} | grep "\.c\(pp\)\?$")
          set -e
          echo CHANGED_FILES=$CHANGED_FILES >> $GITHUB_OUTPUT

      - name: Check clang-tidy
        id: clang-tidy-check
        if: ${{ steps.get-file-list.outputs.CHANGED_FILES != ''}}
        run: |
          clang-tidy -p ./build --header-filter='.*' --warnings-as-errors='*' \
            ${{ steps.get-file-list.outputs.CHANGED_FILES }}

      - name: Generate / show patch
        if: ${{ failure() && steps.clang-tidy-check.outcome == 'failure' }}
        run: |
          clang-tidy -p ./build --header-filter='.*' --fix --fix-errors \
            --quiet ${{ steps.get-file-list.outputs.CHANGED_FILES }}
          git diff >> clang-tidy.patch
          git diff --color=always

      - name: Upload patch
        if: ${{ failure() && steps.clang-tidy-check.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: clang-tidy_patch
          path: clang-tidy.patch
          retention-days: 5

  cppcheck:
    timeout-minutes: 60
    name: Check cppcheck
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix develop .#ci -ic bash -exo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Configure project
        run: cmake $FETCHCONTENT_FLAGS -B build

      - name: Check cppcheck
        id: cppcheck-run
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          mkdir .cppcheck
          cppcheck_flags="--cppcheck-build-dir=.cppcheck --quiet --std=c++17 \
            --project=build/compile_commands.json -ibuild -inucleus/tests \
            --check-level=exhaustive --enable=all --verbose --inline-suppr \
            --suppress=missingIncludeSystem --suppress=*:build/* \
            --suppress=*:/*"
          # print output, save to text file, and save to xml (only checks once)
          cppcheck $cppcheck_flags
          cppcheck $cppcheck_flags 2> report.txt
          cppcheck $cppcheck_flags --xml 2> report.xml
          [ ! -s report.txt ] || exit 1

      - name: Generate report
        if: ${{ failure() && steps.cppcheck-run.outcome == 'failure' }}
        run: cppcheck-htmlreport --file=report.xml --report-dir=cppcheck_report

      - name: Upload report
        if: ${{ failure() && steps.cppcheck-run.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: cppcheck_report
          path: cppcheck_report
          retention-days: 5

  git-secrets:
    timeout-minutes: 60
    name: Check git-secrets
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix develop .#ci -ic bash -exo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: "tree:0"
      - uses: cachix/install-nix-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check git-secrets
        run: |
          git-secrets --register-aws
          git-secrets --scan
